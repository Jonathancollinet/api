/**
 * Module dependencies.
 */
var passport = require('passport')
  , util = require('util');


/**
 * `RefreshTokenStrategy` constructor.
 *
 * The HTTP Adok authentication strategy authenticates requests based on
 * provider, token and userid credentials contained in the `Authorization` header
 * field.
 *
 * Applications must supply a `verify` callback which accepts `provider`, `token` and
 * `userid` credentials, and then calls the `done` callback supplying a
 * `user`, which should be set to `false` if the credentials are not valid.
 * If an exception occured, `err` should be set.
 *
 * Optionally, `options` can be used to change the authentication realm.
 *
 * Options:
 *   - `realm`  authentication realm, defaults to "Users"
 *
 * Examples:
 *
 *     passport.use(new RefreshTokenStrategy(
 *       function(provider, token, userid, done) {
 *       }
 *     ));
 *
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
function RefreshTokenStrategy(options, verify) {
  if (typeof options == 'function') {
    verify = options;
    options = {};
  }
  if (!verify) throw new Error('HTTP Adok authentication strategy requires a verify function');

  passport.Strategy.call(this);
  this.name = 'adok-refresh';
  this._verify = verify;
  this._realm = options.realm || 'Users';
  this._passReqToCallback = options.passReqToCallback;
}

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(RefreshTokenStrategy, passport.Strategy);

/**
 * Authenticate request based on the contents of a HTTP POST form
 * datas.
 *
 * @param {Object} req
 * @api protected
 */
RefreshTokenStrategy.prototype.authenticate = function(req) {
  var refresh_token = req.body.token;

  if (!refresh_token) {
    return this.fail(this._challenge());
  }

  var self = this;

  function verified(err, user) {
    if (err) { return self.error(err); }
    if (!user) { return self.fail(self._challenge()); }
    self.success(user);
  }

  if (self._passReqToCallback) {
    this._verify(req, refresh_token, verified);
  } else {
    this._verify(refresh_token, verified);
  }
}

/**
 * Authentication challenge.
 *
 * @api private
 */
RefreshTokenStrategy.prototype._challenge = function() {
  return 'Refresh realm="' + this._realm + '"';
}


/**
 * Expose `RefreshTokenStrategy`.
 */
module.exports = RefreshTokenStrategy;
